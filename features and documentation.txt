. Refactor the New Movie to select movie from file system to add. The result of which is a movie to pass to the create_movie function, reusing the logic in the scrape_movie function.
. Refactor Update movie to utilize the same logic as New Movie.
. Bug - UI disable Scrape link once clicked till it finishes. One request only till completion. Perhaps use asynch io or a task queue as well. Since this process takes a while.
. Scrape TV Series content
. Web service that renders movie files. (See point below - 'Launch video file to play film from the app.'
. Scrape Music content. - Separate app for this. NOT DOING This app is as it is titled for dealing with data on IMDB. Tunes do not live there.
. Search facility using natural language search with Elasticsearch - Done
. Scrape sub-folders for movie content function - DONE
. Delete from app also removes file from hard drive - DONE
. Implement logging - Done
. Launch video file to play film from the app - DONE
    We are rendering a template to play the movie file using the html 5 video tag. To play the movie
     we are using a javascript workaround with a file input tag that is used to locate the specific movie file on the users file system. The video tag
     'src' attribute will not render a file system object directly because of system security. The 'src' attribute expects an http context.
     *So perhaps a future feature will be to implement an http web server that serves up the movie files with their respective locations.

Required naming for movie files.
file name needs to be in following format:
Title of movie + space(year).extension
We support .mp4, .mkv and .avi extensions

Configuration
Set your path locations for movie scraping for flat folder(no subfolders) and for layout structures that use subfolders. Presently no TV series capability.
